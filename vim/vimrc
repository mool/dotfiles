source ~/.vim/plugins.vim

filetype plugin on

set laststatus=2
set tabstop=2
set shiftwidth=2
set expandtab
set nofoldenable
set number
" set clipboard=unnamed

let mapleader = ','

let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'

let NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.rbc$', '\.rbo$', '\.class$', '\.o$', '\~$']
map <C-n> :NERDTreeToggle<CR>

nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)

map <C-p> :Files<CR>

autocmd! BufWritePost * Neomake
autocmd! BufNewFile,BufRead Gemfile setfiletype ruby
autocmd! BufNewFile,BufRead Vagrantfile setfiletype ruby
autocmd! BufNewFile,BufRead *.cap setfiletype ruby
autocmd! BufNewFile,BufRead \(attributes\|definitions\|libraries\|providers\|recipes\|resources\)/*.rb set filetype=ruby.chef
autocmd! BufNewFile,BufRead templates/*/*.erb set filetype=eruby.chef
autocmd! BufNewFile,BufRead metadata.rb set filetype=ruby.chef

" let g:neomake_warning_sign = {
  " \ 'text': 'W',
  " \ 'texthl': 'WarningMsg',
  " \ }
" let g:neomake_error_sign = {
  " \ 'text': 'E',
  " \ 'texthl': 'ErrorMsg',
  " \ }
let g:neomake_ruby_enabled_makers = ['rubocop']
let g:neomake_chef_enabled_makers = ['rubocop', 'foodcritic']

" Run cookstyle instead of rubocop
autocmd Filetype chef :let g:neomake_ruby_rubocop_maker = {
  \ 'args': ['--format', 'emacs'],
  \ 'errorformat': '%f:%l:%c: %t: %m,%E%f:%l: %m',
  \ 'postprocess': function('neomake#makers#ft#ruby#RubocopEntryProcess'),
  \ 'exe': 'cookstyle',
  \ }

" Solarized + Colorscheme configs
set background=dark
let g:solarized_termcolors=256
colorscheme solarized

let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'MyFugitive',
      \   'readonly': 'MyReadonly',
      \   'modified': 'MyModified'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '|', 'right': '|' }
      \ }

function! MyModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "☣"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! MyReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "☠"
  else
    return ""
  endif
endfunction

function! MyFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? '☞ '._ : ''
  endif
  return ''
endfunction

"""""""" OLD CONFIGS

" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlP'
" let g:ctrlp_custom_ignore = {
  " \ 'dir':  '\v[\/]\.(git|hg|svn)$|bower_components|node_modules',
  " \ 'file': '\.pyc$\|\.pyo$\|\.rbc$|\.rbo$\|\.class$\|\.o$\|\~$\',
  " \ }

" Function not longer needed, remember to delete it later
" function! Lint()
  " if &filetype =~ 'ruby'
    " Neomake rubocop
  " else
    " Neomake
  " end
" endfunction
" autocmd! BufWritePost * call Lint()
"
" autocmd! BufNewFile,BufRead */cookbooks/*/\(attributes\|definitions\|libraries\|providers\|recipes\|resources\)/*.rb set filetype=ruby.chef
" autocmd! BufNewFile,BufRead */cookbooks/*/templates/*/*.erb set filetype=eruby.chef
" autocmd! BufNewFile,BufRead */cookbooks/*/metadata.rb set filetype=ruby.chef
" autocmd! BufNewFile,BufRead */site-cookbooks/*/\(attributes\|definitions\|libraries\|providers\|recipes\|resources\)/*.rb set filetype=ruby.chef
" autocmd! BufNewFile,BufRead */site-cookbooks/*/templates/*/*.erb set filetype=eruby.chef
" autocmd! BufNewFile,BufRead */site-cookbooks/*/metadata.rb set filetype=ruby.chef
